{"version":3,"sources":["webpack:///./src/templates/blogs/categories.js"],"names":["Categories","edges","data","allMarkdownRemark","title","className","map","node","frontmatter","fields","slug","key","to","fluid","image","childImageSharp","categories","item","index","length","style","boxShadow","width","height","date","time","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"8FAAA,yIA8JeA,UAxII,SAAC,GAAc,IACxBC,EADuB,EAAXC,KACGC,kBAAfF,MAKR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,MAAM,mBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACA,kBAAC,IAAD,KACE,kBAAC,IAAD,kJAKA,kBAAC,IAAD,OAGF,kBAAC,IAAD,CAAiBC,UAAU,WACxBJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNH,EAAQG,EAAKC,YAAYJ,OAASG,EAAKE,OAAOC,KACpD,OACE,kBAAC,IAAD,CAAUC,IAAKJ,EAAKE,OAAOC,MACzB,yBAAKL,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAAC,OAAD,CAAMO,GAAIL,EAAKE,OAAOC,MACpB,kBAAC,IAAD,CACEG,MAAON,EAAKC,YAAYM,MAAMC,gBAAgBF,MAC9CT,MAAM,kBAMd,yBAAKC,UAAU,WACb,gCACE,kBAAC,IAAD,KACE,0BAAMA,UAAU,gBACbE,EAAKC,YAAYQ,WAAWV,KAAI,SAACW,EAAMC,GAAP,OAC/B,kBAAC,OAAD,CAAMN,GAAE,IAAMK,EAAQN,IAAKO,GACzB,0BAAMb,UAAU,4CAAhB,IACIY,GAEHV,EAAKC,YAAYQ,WAAWG,SAC7BD,EAAQ,EACN,0BAAMb,UAAU,6BACb,IADH,IAEI,KAGJ,OAGF,MAGR,kBAAC,IAAD,KACE,kBAAC,OAAD,CACEA,UAAU,eACVe,MAAO,CAAEC,UAAU,QACnBT,GAAIL,EAAKE,OAAOC,MAEfN,IAGL,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,UAAU,4BACViB,MAAM,KACNC,OAAO,OAET,0BAAMlB,UAAU,gBACb,IADH,cAEcE,EAAKC,YAAYgB,KAAM,MAGvC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEnB,UAAU,4BACViB,MAAM,KACNC,OAAO,OAET,0BAAMlB,UAAU,gBACb,IADH,iBAEiBE,EAAKC,YAAYiB,KAAM,OAI5C,kBAAC,IAAD,CACEC,wBAAyB,CACvBC,OAAQpB,EAAKC,YAAYoB,aAAerB,EAAKsB,WAGjD,kBAAC,OAAD,CAAMjB,GAAIL,EAAKE,OAAOC,MACpB,kBAAC,IAAD,CAAUL,UAAU,cACjB,IADH,cAEoB","file":"component---src-templates-blogs-categories-js-4d009edbacc3ae12a57e.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport { Calendar, Clock } from \"react-feather\"\r\nimport Img from \"gatsby-image\"\r\nimport CategoriesTags from \"../../components/CategoriesTags/categoriesTags\"\r\nimport {\r\n  ContainerLayout,\r\n  WorkPost,\r\n  Intro,\r\n  SubTitle,\r\n  Title,\r\n  Text,\r\n  HeaderIntro,\r\n  SubText,\r\n  SmallText,\r\n  UnderLink,\r\n  ReadMore,\r\n} from \"../../components/common\"\r\nimport Layout from \"../../components/layout\"\r\nimport SEO from \"../../components/seo\"\r\n\r\nconst Categories = ({ data }) => {\r\n  const { edges } = data.allMarkdownRemark\r\n  // const tagHeader = `${totalCount} post${\r\n  //   totalCount === 1 ? \"\" : \"s\"\r\n  // } tagged with \"${category}\"`\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Blog Home Page\" />\r\n      <Intro>\r\n        <ContainerLayout>\r\n          <SubTitle>Articles</SubTitle>\r\n          <HeaderIntro>\r\n            <SubText>\r\n              Articles on software development, where I share my process when\r\n              designing a system, and different algorithms used during the\r\n              development.\r\n            </SubText>\r\n            <CategoriesTags />\r\n          </HeaderIntro>\r\n\r\n          <ContainerLayout className=\"wrapper\">\r\n            {edges.map(({ node }) => {\r\n              const title = node.frontmatter.title || node.fields.slug\r\n              return (\r\n                <WorkPost key={node.fields.slug}>\r\n                  <div className=\"media\">\r\n                    <div className=\"image-wrapper\">\r\n                      <Link to={node.fields.slug}>\r\n                        <Img\r\n                          fluid={node.frontmatter.image.childImageSharp.fluid}\r\n                          title=\"work title\"\r\n                        />\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"content\">\r\n                    <header>\r\n                      <SmallText>\r\n                        <span className=\"align-middle\">\r\n                          {node.frontmatter.categories.map((item, index) => (\r\n                            <Link to={`/${item}`} key={index}>\r\n                              <span className=\"align-middle text-primary text-underline\">\r\n                                #{item}\r\n                              </span>\r\n                              {node.frontmatter.categories.length !==\r\n                              index + 1 ? (\r\n                                <span className=\"align-middle text-primary\">\r\n                                  {\" \"}\r\n                                  ,{\" \"}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </Link>\r\n                          ))}{\" \"}\r\n                        </span>\r\n                      </SmallText>\r\n                      <Title>\r\n                        <Link\r\n                          className=\"text-primary\"\r\n                          style={{ boxShadow: `none` }}\r\n                          to={node.fields.slug}\r\n                        >\r\n                          {title}\r\n                        </Link>\r\n                      </Title>\r\n                      <SmallText>\r\n                        <Calendar\r\n                          className=\"align-middle text-primary\"\r\n                          width=\"18\"\r\n                          height=\"18\"\r\n                        />\r\n                        <span className=\"align-middle\">\r\n                          {\" \"}\r\n                          Posted on: {node.frontmatter.date}{\" \"}\r\n                        </span>\r\n                      </SmallText>\r\n                      <SmallText>\r\n                        <Clock\r\n                          className=\"align-middle text-primary\"\r\n                          width=\"18\"\r\n                          height=\"18\"\r\n                        />\r\n                        <span className=\"align-middle\">\r\n                          {\" \"}\r\n                          Reading Time: {node.frontmatter.time}{\" \"}\r\n                        </span>\r\n                      </SmallText>\r\n                    </header>\r\n                    <Text\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: node.frontmatter.description || node.excerpt,\r\n                      }}\r\n                    />\r\n                    <Link to={node.fields.slug}>\r\n                      <ReadMore className=\"lined-link\">\r\n                        {\" \"}\r\n                        Read more &#8594;{\" \"}\r\n                      </ReadMore>\r\n                    </Link>\r\n                  </div>\r\n                </WorkPost>\r\n              )\r\n            })}\r\n          </ContainerLayout>\r\n        </ContainerLayout>\r\n      </Intro>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nCategories.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    category: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default Categories\r\n\r\nexport const pageQuery = graphql`\r\n  query($category: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { categories: { in: [$category] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            time\r\n            title\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 600, quality: 100) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            categories\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}